{
  "pipelineSpec": {
    "components": {
      "comp-ingest-data": {
        "executorLabel": "exec-ingest-data",
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      },
      "comp-load-data": {
        "executorLabel": "exec-load-data",
        "inputDefinitions": {
          "parameters": {
            "text": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "parameters": {
            "Output": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-ingest-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "ingest_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.20' 'tensorflow==2.11.0' 'tensorflow-datasets' 'numpy==1.21.6' 'kfp==1.8.9' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef ingest_data() -> str:\n    import tensorflow_datasets as tfds\n    import numpy as np\n    import tensorflow as tf\n\n    print(\"\\n\\n\" + \"Tensorflow version is: \" + tf.__version__ + \"\\n\\n\")\n    print(\"\\n\\n\" + \"Tfds version is: \" + tfds.__version__ + \"\\n\\n\")\n\n    validation_split = 10\n    bucket = 'gs://tfds-dir1'\n    # bucket = 'gs://pipeline-tester1'\n\n    # test_ds, cifar10_info = tfds.load('cifar10', split='test', with_info=True, as_supervised=True, shuffle_files=True, data_dir=\"gs://tfds-dir\")\n    # test_ds = tfds.load('cifar10', split='test', as_supervised=True, shuffle_files=True, data_dir=bucket + \"/test\", try_gcs=True)\n    # validation_ds = tfds.load('cifar10', split=f'train[:{validation_split}%]', as_supervised=True, data_dir=bucket + \"/valid\", try_gcs=True)\n    # training_ds = tfds.load('cifar10', split=f'train[{validation_split}%:]', as_supervised=True, data_dir=bucket + \"/train\", try_gcs=True)\n\n    # test_ds = tfds.load('cifar10', split='test', as_supervised=True, shuffle_files=True)\n    # validation_ds = tfds.load('cifar10', split=f'train[:{validation_split}%]', as_supervised=True)\n    training_ds = tfds.load('cifar10', split=f'train[{validation_split}%:]', as_supervised=True)\n\n    dataset = training_ds\n\n    # def custom_shard_func(element):\n    #     return np.int64(0)\n\n    #need the \"self\" parameter as their is an implicit argument in the custom_shard_func\n    # that gives an error saying one arg expected but two were given\n    def custom_shard_func(self, element):\n        return np.int64(0)\n\n    training_ds.save(\n        path=bucket + \"/train1\", shard_func=custom_shard_func)\n\n    new_dataset = tf.data.Dataset.load(bucket + \"/train1\")\n    return \"gs://tfds-dir\"\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.20' 'tensorflow==2.11.0' 'tensorflow-datasets' 'numpy==1.21.6' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_data(text: str) -> str:\n    import tensorflow_datasets as tfds\n    import numpy as np\n    import tensorflow as tf\n\n    bucket = 'gs://tfds-dir1'\n    # bucket = 'gs://pipeline-tester1'\n\n    new_dataset = tf.data.Dataset.load(bucket + \"/train1\")\n\n    return \"loaded\"\n\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "pipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "ingest-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-ingest-data"
            },
            "taskInfo": {
              "name": "ingest-data"
            }
          },
          "load-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-data"
            },
            "dependentTasks": [
              "ingest-data"
            ],
            "inputs": {
              "parameters": {
                "text": {
                  "taskOutputParameter": {
                    "outputParameterKey": "Output",
                    "producerTask": "ingest-data"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "load-data"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.9"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://tfds-dir1"
  }
}